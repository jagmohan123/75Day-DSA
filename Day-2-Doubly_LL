#include<bits/stdc++.h>
using namespace std;
class Node {
public:
	int data;
	Node* prev;
	Node* next;
	// default Constructor
	Node() {
		this->data=0;
		this->next=NULL;
		this->prev=NULL;

	}

	Node(int data) {
		this->data=0;
		this->next=NULL;
		this->data=data;
	}
};


int LLODLL(Node* &head) {
	int length=0;
	Node* temp=head;
	while(temp!=NULL) {
		length++;
		temp=temp->next;
	}
	return length;
}

void printDLL(Node* &head) {
	Node* temp=head;
	while(temp!=NULL) {
		cout<<" "<<temp->data<<"->";
		temp=temp->next;
	}
	cout<<endl;
}
void insertAtHead(Node* &head, Node*& tail, int data ) {
	// empty case
	if(head==NULL) {
		Node * newNode=new Node(data);
		head=newNode;
		tail=newNode;
		return;
	}
	// non empty case
	Node * newNode=new Node(data);
	newNode->next=head;
	head->prev=newNode;
	head=newNode;
}
void insertAtTail(Node* &head, Node*& tail, int data ) {
	// empty case
	if(head==NULL) {
		Node * newNode=new Node(data);
		head=newNode;
		tail=newNode;
		return;
	}
	// non empty case
	Node * newNode=new Node(data);
	tail->next=newNode;
	newNode->prev=tail;
	tail=newNode;
}


void insertAtAnyPosition(Node* &head, Node*& tail, int data,int position) {
	//base case 1 empty case create node
	if(head==NULL) {
		Node * newNode=new Node(data);
		head=newNode;
		tail=newNode;
		return;
	}

	// case 2 invalid position
	if(position<=0) {
		cout<<"Pass the valid position"<<endl;
		return;
	}

	// case 3
	if(position==1) {
		insertAtHead(head,tail,data);
		return;
	}

	//case 4
	int length=LLODLL(head);
	if(position>length) {
		insertAtTail(head,tail,data);
		return;
	}


	// case 5 insert at middle so position exist from 2 to length-1 so put in middle
	Node * prevNode=NULL;
	Node* current=head;
	while(position!=1) {
		prevNode=current;
		current=current->next;
		position--;
	}

	Node *newNode=new Node(data);
	prevNode->next=newNode;
	newNode->prev=prevNode;
	newNode->next=current;
	current->prev=newNode;
}
int main() {
	Node* head=NULL;
	Node * tail=NULL;
	insertAtHead(head,tail,30);
	insertAtHead(head,tail,40);
	insertAtHead(head,tail,20);
	insertAtHead(head,tail,10);
	insertAtHead(head,tail,5);


	printDLL(head);
	cout<<"length of the DLL is ->"<<LLODLL(head)<<endl;
	cout<<"Head at =>"<<head->data<<"   "<<"Tail at "<<tail->data<<endl;
	insertAtTail(head,tail,50);
	insertAtTail(head,tail,60);
	insertAtTail(head,tail,70);
	printDLL(head);
	cout<<"length of the DLL is ->"<<LLODLL(head)<<endl;
	cout<<"Head at =>"<<head->data<<"   "<<"Tail at "<<tail->data<<endl;
	insertAtAnyPosition(head,tail,25000,5);
	printDLL(head);
	cout<<"length of the DLL is ->"<<LLODLL(head)<<endl;
	cout<<"Head at =>"<<head->data<<"   "<<"Tail at "<<tail->data<<endl;
	return 0;
}

